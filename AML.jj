
PARSER_BEGIN(AML)

   import java.io.*;

   class AML {

      public static void main(String[] args)
         throws ParseException, TokenMgrError
      {
         if (args.length > 0) {
	    try {
	       AML scan = new AML(new FileInputStream(args[0]));
	       scan.Program().eval();
	    } catch (FileNotFoundException ex) {
	       System.out.println("File "+args[0]+" not found.");
	    }
	 } else {
	    System.out.println("Must specify source code file name.");
	 }
      }
	
   } // end class

PARSER_END(AML)

SKIP : { " " | "\t" | "\n" }
TOKEN : { <INPUT : "enter input for"> }
TOKEN : { <OUTPUT : "show"> }
TOKEN : { <ASSIGN : "is"> }
TOKEN : { <INT : ("0" | ["1"-"9"](["0"-"9"])*)> }
TOKEN : { <DOT : "."> }
TOKEN : { <ID : (["A"-"Z"] | ["a"-"z"]) (["A"-"Z"] | ["a"-"z"] | ["0"-"9"] | "_")*> }
TOKEN : { <LP : "("> }
TOKEN : { <RP : ")"> }
TOKEN : { <PLUS : "+"> }
TOKEN : { <MINUS : "-"> }
TOKEN : { <TIMES : "*"> }
TOKEN : { <DIV : "/"> }
TOKEN : { <LESST : "<"> }
TOKEN :	{ <MORET : ">"> }
TOKEN :	{ <LESSOREQ : "<="> }
TOKEN : { <MOREOREQ : ">="> }
TOKEN : { <EQUALT : "=="> }
TOKEN : { <NOTEQUALT : "!="> }
TOKEN : { <START : "!start"> }
TOKEN : { <END : "!end"> }
TOKEN : { <WHILE : "!loop"> }
TOKEN : { <IF : "!provided"> }
TOKEN : { <ELSE : "!alternatively"> }
Node Assign():
{
	Node n;
	Node c;
	Token t;
}
{
	{n = new AssignNode();}
	t = <ID> {n.addChild(new IDNode(t.image));}
	<ASSIGN>
	c = Exp() {n.addChild(c);}
	<DOT>
	{return n; }
}

Node Input():
{
	Node n;
	Token t;
}
{
	{n = new InputNode();}
	<INPUT>
	t= <ID> {n.addChild(new IDNode(t.image)); }
	<DOT>
	{ return n; }
}

Node Output():
{
	Node n;
	Node c;
}
{
	{n = new OutputNode();}
	<OUTPUT>
	c = Exp() {n.addChild(c);}
	<DOT>
	{return n;}
}

Node factor():
{
        Node c;
	Token t;
}
{
	(
	t = <ID> {return new IDNode(t.image); }
	|
	t = <INT> {return new INTNode(t.image); }
	|
	(
	<LP> 
	c = Exp() 
	<RP>
	)
	)
	{ return c; }
}	

Node Mexp():
{
        Node n;
        Token t;
	Node c;
}
{
        {n = new ExpNode();}
	c = factor() {n.addChild(c);} 
	(	
	t = <TIMES> 
	c = factor() {n.addChild(new OpNode(t.image)); n.addChild(c); }
	|
	t = <DIV> 
	c = factor() {n.addChild(new OpNode(t.image));n.addChild(c); }
	)*
	{return n;}
}

Node Exp():
{
	Node n;
	Token t;
	Node c;
}
{
	{n = new ExpNode();}
	c = Mexp() {n.addChild(c);}
	(
	t = <PLUS> 
	c = Mexp() {n.addChild(new OpNode(t.image));n.addChild(c);}
	| 
	t = <MINUS> 
	c = Mexp() {n.addChild (new OpNode(t.image));n.addChild(c); }
	)*
	{return n;}
}

Node Program():
{
	Node n;
	Node c;
}
{
	{n = new BlockNode();}
	(
	c = Assign() {n.addChild(c);}
	|
	c = Input() {n.addChild(c);}
	|
	c = Output() {n.addChild(c);}
	|
	c = Loop() {n.addChild(c);}
	|
	c = If() {n.addChild(c);}
	)+
	<EOF>
	{return n;}
}
Node Relop():
{
	Token t;
	Node n;
}
{
	{n=null;}
	(
	t = <LESST> {n = new OpNode(t.image);}
	|
	t = <MORET> {n = new OpNode(t.image);}
	|
	t = <LESSOREQ> {n = new OpNode(t.image);}
	|
	t = <MOREOREQ> {n = new OpNode(t.image);}
	|
	t = <EQUALT> {n = new OpNode(t.image);}
	|
	t = <NOTEQUALT> {n = new OpNode(t.image);}
	)
	{return n;}
}
Node Relation():
{
	Node n;
	Node c;
}
{
	{n = new RelNode();}
	(
	c = Exp() {n.addChild(c);}
	c = Relop() {n.addChild(c);}
	c = Exp() {n.addChild(c);}
	)
	{return n;}
}
Node Loop():
{
	Node n;
	Node c;
		
}
{
	{n = new LoopNode();}
	<WHILE>
	<LP>
	c = Relation() {n.addChild(c);}
	<RP>
	c = Block() {n.addChild(c);}
	{return n;}
}
Node Block():
{
	Node n;
	Node c;
}
{
	{n = new BlockNode();}
	<START>
	(
	c = Input() {n.addChild(c);}
	|
	c = Output() {n.addChild(c);}
	|
	c = Assign() {n.addChild(c);}
	|
	c = Loop() {n.addChild(c);}
	)+
	<END>
	{return n;}
}
Node If():
{
	Node n;
	Node c;
}
{
	{n = new IfElseNode();}
	<IF>
	<LP>
	c = Relation() {n.addChild(c);} 
	<RP>
	c = Block() {n.addChild(c);}
	(
	<ELSE>
	c = Block() {n.addChild(c);}
	)?
	{return n;}
}
